/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcessedEvent } from "./ProcessedEvent";
import { ProcessedEventCountArgs } from "./ProcessedEventCountArgs";
import { ProcessedEventFindManyArgs } from "./ProcessedEventFindManyArgs";
import { ProcessedEventFindUniqueArgs } from "./ProcessedEventFindUniqueArgs";
import { CreateProcessedEventArgs } from "./CreateProcessedEventArgs";
import { UpdateProcessedEventArgs } from "./UpdateProcessedEventArgs";
import { DeleteProcessedEventArgs } from "./DeleteProcessedEventArgs";
import { ProcessedEventService } from "../processedEvent.service";
@graphql.Resolver(() => ProcessedEvent)
export class ProcessedEventResolverBase {
  constructor(protected readonly service: ProcessedEventService) {}

  async _processedEventsMeta(
    @graphql.Args() args: ProcessedEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcessedEvent])
  async processedEvents(
    @graphql.Args() args: ProcessedEventFindManyArgs
  ): Promise<ProcessedEvent[]> {
    return this.service.processedEvents(args);
  }

  @graphql.Query(() => ProcessedEvent, { nullable: true })
  async processedEvent(
    @graphql.Args() args: ProcessedEventFindUniqueArgs
  ): Promise<ProcessedEvent | null> {
    const result = await this.service.processedEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcessedEvent)
  async createProcessedEvent(
    @graphql.Args() args: CreateProcessedEventArgs
  ): Promise<ProcessedEvent> {
    return await this.service.createProcessedEvent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProcessedEvent)
  async updateProcessedEvent(
    @graphql.Args() args: UpdateProcessedEventArgs
  ): Promise<ProcessedEvent | null> {
    try {
      return await this.service.updateProcessedEvent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcessedEvent)
  async deleteProcessedEvent(
    @graphql.Args() args: DeleteProcessedEventArgs
  ): Promise<ProcessedEvent | null> {
    try {
      return await this.service.deleteProcessedEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
