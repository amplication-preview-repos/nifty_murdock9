/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProcessedEvent as PrismaProcessedEvent } from "@prisma/client";

export class ProcessedEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedEvent.count(args);
  }

  async processedEvents(
    args: Prisma.ProcessedEventFindManyArgs
  ): Promise<PrismaProcessedEvent[]> {
    return this.prisma.processedEvent.findMany(args);
  }
  async processedEvent(
    args: Prisma.ProcessedEventFindUniqueArgs
  ): Promise<PrismaProcessedEvent | null> {
    return this.prisma.processedEvent.findUnique(args);
  }
  async createProcessedEvent(
    args: Prisma.ProcessedEventCreateArgs
  ): Promise<PrismaProcessedEvent> {
    return this.prisma.processedEvent.create(args);
  }
  async updateProcessedEvent(
    args: Prisma.ProcessedEventUpdateArgs
  ): Promise<PrismaProcessedEvent> {
    return this.prisma.processedEvent.update(args);
  }
  async deleteProcessedEvent(
    args: Prisma.ProcessedEventDeleteArgs
  ): Promise<PrismaProcessedEvent> {
    return this.prisma.processedEvent.delete(args);
  }
}
